plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'com.github.dcendents.android-maven'
}

group='com.rlnb.lib.media'
//https://github.com/dcendents/android-maven-gradle-plugin
//https://juejin.cn/post/6916061679079915528
//https://jitpack.io/
//https://blog.csdn.net/a990924291/article/details/110915814

android {
    // 资源前缀
    resourcePrefix("lmedia")

    compileSdkVersion rootProject.ext.android.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures{
        dataBinding = true
    }
}

dependencies {

    compileOnly rootProject.ext.dependencies.coreKtx
    compileOnly rootProject.ext.dependencies.kotlinStdlib
    compileOnly rootProject.ext.dependencies.appcompat
    compileOnly rootProject.ext.dependencies.material
    testImplementation rootProject.ext.dependencies.junit
    androidTestImplementation rootProject.ext.dependencies.junitExt
    androidTestImplementation rootProject.ext.dependencies.espressoCore


    compileOnly rootProject.ext.dependencies.paging
    compileOnly rootProject.ext.dependencies.logger
    compileOnly rootProject.ext.dependencies.glide
    annotationProcessor rootProject.ext.dependencies.glideCompiler
}

// 指定编码
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// 打包源码
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError  false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

// 制作文档(Javadoc)
task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}